package com.webdev.server.controllers;

import java.sql.Date;

import javax.websocket.server.PathParam;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.webdev.server.dao.BookImpl;
import com.webdev.server.helpers.JsonHelper;

@Controller
@RequestMapping(value="/book")
public class BookController {
	@RequestMapping(value="{id}", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String get(@PathVariable Integer id) {
		if (id != null){
			return JsonHelper.getInstance().parse(new BookImpl().get(id)).toString();
		}
		
		return null;
	}
	
	@RequestMapping(value="new", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getNew(@PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null){
			return JsonHelper.getInstance().parse(new BookImpl().getNew(from, size)).toString();
		}
		
		return null;
	}
	//bug
	@RequestMapping(value="cateId", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getByCateId(@PathParam(value = "cateId") Integer cateId, @PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null && cateId != null){
			return JsonHelper.getInstance().parse(new BookImpl().getByCategory(cateId, from, size)).toString();
		}
		
		return null;
	}
	//bug
	@RequestMapping(value="cate", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getByCate(@PathParam(value = "tag") String tag, @PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null && tag != null){
			return JsonHelper.getInstance().parse(new BookImpl().getByCategory(tag, from, size)).toString();
		}
		
		return null;
	}
	//error
	@RequestMapping(value="public", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getPublic(@PathParam(value = "begin") Date begin, @PathParam(value = "end") Date end, @PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null && begin != null && end != null){
			return JsonHelper.getInstance().parse(new BookImpl().getByDate(begin, end, from, size)).toString();
		}
		
		return null;
	}
	
	@RequestMapping(value="price", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getByPrice(@PathParam(value = "gte") Double gte, @PathParam(value = "lte") Double lte, @PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null && gte != null && lte != null){
			return JsonHelper.getInstance().parse(new BookImpl().getPrice(lte, gte, from, size)).toString();
		}
		
		return null;
	}
	
	@RequestMapping(value="recommend", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getByCate(@PathParam(value = "id") Integer id, @PathParam(value = "from") Integer from, @PathParam(value = "size") Integer size) {
		if (from != null && size != null && id != null){
			return JsonHelper.getInstance().parse(new BookImpl().getRecommend(id, from, size)).toString();
		}
		
		return null;
	}
	
	@RequestMapping(value="", method = RequestMethod.GET, headers = "Accept=application/json; charset=UTF-8")
	public @ResponseBody String getRandom(@PathParam(value = "size") Integer size) {
		if (size != null){
			return JsonHelper.getInstance().parse(new BookImpl().getRandom(size)).toString();
		}
		
		return null;
	}
}
